#!/usr/bin/env node

const { resolve } = require('path')
const { exec } = require('child_process')
const fs = require('fs/promises')

const installPythonPackage = (folder) => {
  return new Promise((resolve, reject) => {
    console.log("\n---", "\n\n", `Installing ${folder}...`)
    exec(`cd ${folder} && python3 -m pip install --user -e .`, (err, stdout) => {
      console.log(err || stdout, "\n\n", "---\n")
      return resolve(err || stdout)
    })
  })
}

;(async () => {
  const servicesDirContents = await fs.readdir(
    resolve(`./services`),
    {
      withFileTypes: true,
    },
  )

  let serviceFolders = servicesDirContents.filter((_folder) => _folder.isDirectory())
  serviceFolders = serviceFolders.map((_folder) =>
    `${resolve('./services')}/${_folder.name}`
  )

  const hpiFolders = [ 'hpi-karli', 'hpi-sean', 'hpi-maddie', 'hpi-api', 'authenticated-hpi-api' ].map((folderName) => {
    return `${resolve('./hpi')}/${folderName}`
  })

  await installPythonPackage(hpiFolders[0])
  await installPythonPackage(hpiFolders[1])
  await installPythonPackage(hpiFolders[2])
  await installPythonPackage(hpiFolders[3])
  await installPythonPackage(hpiFolders[4])

  const promises = serviceFolders.map(installPythonPackage)

  await Promise.all(promises)

  const hpiPath = './hpi'
  await new Promise((resolve, reject) => {
    console.log(`Running reorder_editable on ${hpiFolders.join(' ')}`)
    exec(`python3 -m reorder_editable reorder ${hpiFolders.join(' ')}`, (err, stdout) => {
      console.log("REORDER:", err, stdout)
      return resolve(err || stdout)
    })
  })
})()
